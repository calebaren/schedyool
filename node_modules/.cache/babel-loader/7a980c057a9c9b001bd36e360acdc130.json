{"ast":null,"code":"var _jsxFileName = \"/Users/calebren/Desktop/Github/test-aws-app/my-react-app/src/Pages/Instructions.tsx\";\n// calebaren.github.io\nimport React from 'react';\nimport Page from './Page';\nimport { Typography, Link, List, ListItem, ListItemText } from '@material-ui/core';\nimport Controls from '../Components/Controls/Controls';\n\nconst Home = () => {\n  return /*#__PURE__*/React.createElement(Page, {\n    title: \"How to\",\n    subtitle: \"Instructions for using Schedyool\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }, \"Thanks to the requirements of blended virtual and physical learning, principals have the daunting task of scheduling students while satisfying several constraints:\"), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 21\n    }\n  }, \"1.  The number of students in each classroom cannot violate its \\\"social-distancing\\\" capacity;\")), /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }, \"2.  sets of students such as siblings and members of \\\"learning pods\\\" who wish to attend school on the same days should be allowed to;\")), /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }, \"3.  pairs of students who wish to attend school on different days, for whatever reason, should be allowed to;  and\")), /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }, \"4.  sets of students such as those learning English as a new language (ENL) or needing integrated co-teaching (ICT) should be handled appropriately.\"))), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"Schedyool simplifies your job by doing the scheduling for you.  You provide information on the students, without giving any students' names, and, in most cases, Schedyool will find and e-mail you a schedule.  After processing your data, Schedyool deletes it.\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"DISCLAIMER:  By using Schedyool, you acknowledge that Schedyool comes with no express or implied warranty.  There is no warranty of any kind concerning the fitness of the Schedyool results for any use.  There is no guaranty that Schedyool will function as intended.  In particular, in some cases Schedyool may produce no schedule at all.  You acknowledge that schedules produced by Schedyool may not satisfy all constraints submitted, and that any schedule produced by Schedyool will be manually reviewed by the school's principal for appropriateness before being implemented.\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, \"How to Use Schedyool\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \"THE STUDENT FILE\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"By far the most complicated file, the student file has EXACTLY one line per student;  there is no header row. Suppose in your school exactly 600 students will participate in blended learning.  Using Excel, create a file containing 600 rows. Column 1.  Insert line numbers in the first column, that is, put a 1 on row 1, a 2 on row 2, 3 on row 3, etc.  I use method 1, ``Using Fill Handle,\\\" from website trumpexcel.com/number-rows-in-excel. Insert link, if possible]  It's easy. Column 2.  In column 2, please the names of the students in some particular (say, alphabetical) order.  This column will not go to Schedyool.  Alternatively, start with a sheet having the names of the students participating in blended learning in column 2, and add the line numbers in column 1. Column 3:  Place in column 3 the grade level of the student whose name appears in column 2. Use 0 for kindergarten.  These numbers must be between 0 and the maximum grade you entered above. Column 4.  In column 4, place M for a boy or F for a girl.  The genders are used only to approximately balance the classrooms by gender. Each additional column, if any, corresponds to a special set.  So far, this file has four columns. If there are no special sets, stop.  If there are special sets, add exactly one column per special set. For each special set, in order, put a 1 if the student is in the special set and a 0 otherwise. For example, if there are two special sets and the first student were not in the first one but were in the second, then in the first row, add a 0 in column 5 and a 1 in column 6. The total number of columns should be 4 plus the number of special sets. Save the workbook as an Excel spreadsheet, perhaps calling it \\\"students_with_names\\\". Now, in Excel, copy all the columns EXCEPT FOR THE FIRST TWO to a new sheet. Save the workbook as type \\\"CSV (Comma Delimited)\\\".  You will get a warning saying \\\"The selected file type does not support workbooks that contain multiple sheets.\\\"  That's exactly what you want.  Click \\\"OK\\\".  Then you will get a warning about losing features, and \\\"Do you want to keep that format?\\\"  Click Yes.  Give the file a name like \\\"students_without_names\\\".  It will be stored with \\\".csv\\\" extension.  It is that file, students_without_names.csv, that you will upload to Schedyool. EXAMPLE. Suppose there are exactly 10 students participating in blended learning in your school and you have two special sets.  Your students_with_names file will have 6 columns and may look like this: 1   John Smith          4 M 0 1 2   Mary Jones          5 F 0 0 3   Letitia Williams    4 F 1 1 4   Bill Friend         0 M 0 0 5   Amir Aslam          2 M 0 0 6   Kareem Smith        3 M 0 0 7   Mohammad Talwar     1 M 1 0 8   Cindy Halvah        1 F 1 0 9   Carla Chan          2 F 0 0 10  Sunil Chopra        5 M 0 1 The corresponding students_without_names.csv file will have 10 rows and look like this: 4,M,0,1 5,F,0,0 4,F,1,1 0,M,0,0 2,M,0,0 3,M,0,0 1,M,1,0 1,F,1,0 2,F,0,0 5,M,0,1 From this file, Schedyool knows that there are two special sets.  Assuming the first is ICT and the second is ENL, Schedyool knows that: The first student is entering fourth grade, is a boy, is not in ICT but is in ENL. The second is entering fifth grade and is a girl in neither ICT nor ENL The third, entering fourth grade, is a girl who is in both ICT and ENL. By the way, if you accidentally upload the file *with* names, don't panic.  The code will fail (because it expects *numbers* in the first column, not names), return an error message, and delete the file. The most difficult aspect of using Schedyool is the creation of the students file.\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"THE ROOM CAPACITY FILE\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, \"This file is much simpler.  Open a new sheet of the workbook.  In that sheet, use only the first three columns of each row.  Each row will correspond to a classroom available every day for blended learning. The first column will contain the line numbers, as above. In the second column, place the name of the classroom, like \\\"Room 128\\\", and in the third, place its \\\"socially-distanced\\\" student capacity, like 10.  (Remember to deduct for teachers.)  There must be exactly one row for each classroom and no header row.  Call that sheet \\\"room_capacities_with_names\\\". Then copy only the *third* column of that sheet to a new sheet. Then save the last sheet alone as a CSV file, as you did above, ignoring the warnings from Excel.  Call that CSV file something like \\\"room_capacities_without_names\\\", to which a \\\".csv\\\" extension will be added.  This is the room capacity file you will upload to Schedyool. EXAMPLE. Here is a sample 7-line room_capacities_without_names.csv file, for a school with 7 classrooms. 10 8 12 12 11 7 9 There are two more files to upload.  They are not difficult.\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }, \"THE SAME-DAY SETS FILE\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, \"You likely have some sets of students who want to be scheduled on the same day.  Perhaps some of your sets are sets of siblings and some are \\\"learning pods.\\\"  You will now create a file containing one line for each such set.  In this file, we represent a student by the number of the row in which the student appears in the students_with_names file. For example, look at the sample students_with_names.csv file above. Suppose that John Smith and Kareem Smith are siblings who should be scheduled on the same day.  Then add to the same-day sets file the row\", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 1\n    }\n  }, \"1  6\"), \"with the 1 in the first column, the 6, in the second, because John Smith is student 1 and Kareem Smith is student 6. If Letitia Williams, Mohammad Talwar, and Carla Chan are in a learning pod together and desire to be scheduled together, add row\", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 1\n    }\n  }, \"3  7  9\"), \"with the 9 in the third column. (The numbers in a row actually do not have to be in sorted order.)  As you can see, different rows in this file can have different numbers of entries. Should Sunil Chopra and Bill Friend be friends who want to be scheduled on the same row, add row\", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 1\n    }\n  }, \"10  4\"), \"Now save this spreadsheet as CSV (not as Excel) into something like \\\"same_day_sets.csv\\\". In CSV format, the file will have three lines and will look like this:\", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 1\n    }\n  }, \"1,6\"), /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 1\n    }\n  }, \"3,7,9\"), /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 1\n    }\n  }, \"10,4\"), \"This is the same-day-sets file you will upload to Schedyool.\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, \"THE DIFFERENT DAY PAIRS FILE\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }, \"Last, you must upload a different-day-pairs file, for pairs of students who want to be scheduled on different days.  This file looks a lot like the same-day-sets file, except that it has exactly two numbers per row.  You simply place on each row the row numbers of a pair of students who want to be scheduled on different days.  For example, if Cindy Halvah and Mohammad Talwar are such a pair, add row\", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 1\n    }\n  }, \"8 7 \"), \"If John Smith and Sunil Chopra are another another such pair, add row\", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 1\n    }\n  }, \"1 10\"), \"Save as CSV into something like \\\"different_day_pairs.csv\\\".  In this example, the 2-line file to be uploaded would be\", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 1\n    }\n  }, \"8,7\"), /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 1\n    }\n  }, \"1,10\")), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }\n  }, \"SUBMITTING YOUR DATA\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }, \"After reviewing your data on the Review page, click Submit.  The code will need up to 15 minutes. At completion, it will send you an e-mail.  The e-mail will contain the schedule, presuming (as is usually the case) it found one.  If it failed to find one, there was probably a mistake in your data, either in the quantities you entered by hand or in the files you uploaded.  In most but not all cases, Schedyool will describe the error, but in some cases you will have to examine the data you entered and find the error yourself.  In rare cases, Schedyool might even fail to find a schedule, if, for example, your scheduling problem is too difficult, even when there is no error in the data.\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }\n  }, \"HOW TO INTERPRET THE E-MAIL\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }\n  }, \"If Schedyool found a schedule, it will appear as the CSV attachment \\\"schedule.csv\\\" to the e-mail. This attachment corresponds to the textual output which appears in the body of the e-mail.  File schedule.csv will have four columns.  The first is the student number, from students_with_names.csv; the second is that student's grade level;  the third is the day on which the student will attend school (more about this in a moment); and the last is the classroom number.\"), /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }\n  }, \"The \\\"day\\\" is really the \\\"schedule.\\\"  For example, for Monday-Tuesday and alternate Wednesdays vs Thursday-Friday and alternate Wednesdays, \\\"day 1\\\" means the former and \\\"day 2\\\" means the latter.\"), /*#__PURE__*/React.createElement(Link, {\n    href: \"/scheduler\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Controls.Button, {\n    text: \"Schedyool!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Link, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Controls.Button, {\n    text: \"Home\",\n    color: \"default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/calebren/Desktop/Github/test-aws-app/my-react-app/src/Pages/Instructions.tsx"],"names":["React","Page","Typography","Link","List","ListItem","ListItemText","Controls","Home"],"mappings":"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","sourcesContent":["// calebaren.github.io\nimport React from 'react';\nimport Page from './Page';\nimport { Typography, Link, List, ListItem, ListItemText } from '@material-ui/core';\nimport Controls from '../Components/Controls/Controls';\n\nconst Home = (): any => {\n    return (\n        <Page title=\"How to\" subtitle=\"Instructions for using Schedyool\" >\n            <Typography paragraph>\n                Thanks to the requirements of blended virtual and physical learning, principals have the\n                daunting task of scheduling students while satisfying several constraints:\n            </Typography>\n            <List>\n                <ListItem>\n                    <ListItemText>\n                        1.  The number of students in each classroom cannot violate its \"social-distancing\" capacity;\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <ListItemText>\n                        2.  sets of students such as siblings and members of \"learning pods\" who wish to attend\n                        school on the same days should be allowed to;\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <ListItemText>\n                        3.  pairs of students who wish to attend school on different days, for whatever reason,\n                        should be allowed to;  and\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <ListItemText>\n                        4.  sets of students such as those learning English as a new language (ENL) or needing\n                        integrated co-teaching (ICT) should be handled appropriately.\n                    </ListItemText>\n                </ListItem>\n            </List>\n\n\n            <Typography paragraph>\n                Schedyool simplifies your job by doing the scheduling for you.  You provide information on\n                the students, without giving any students' names, and, in most cases, Schedyool will find and e-mail\n                you a schedule.  After processing your data, Schedyool deletes it.\n            </Typography>\n            <Typography paragraph variant=\"body2\">\n                DISCLAIMER:  By using Schedyool, you acknowledge that Schedyool comes with no express or\n                implied warranty.  There is no warranty of any kind concerning the fitness of the Schedyool results\n                for any use.  There is no guaranty that Schedyool will function as intended.  In particular,\n                in some cases Schedyool may produce no schedule at all.  You acknowledge that schedules produced\n                by Schedyool may not satisfy all constraints submitted, and\n                that any schedule produced by Schedyool will be manually reviewed by the school's\n                principal for appropriateness before being implemented.\n            </Typography>\n\n            <Typography paragraph variant=\"h5\">\n                How to Use Schedyool\n            </Typography>\n\n            <Typography paragraph variant=\"h5\">\n                THE STUDENT FILE\n            </Typography>\n\n            <Typography paragraph variant=\"body2\">\n            By far the most complicated file, the student file has EXACTLY one line per student;  there is no header row.  \nSuppose in your school exactly 600 students will participate in blended learning.  Using Excel,\ncreate a file containing 600 rows.\n\nColumn 1.  Insert line numbers in the first column, that is, put a 1 on row 1, a 2 on row 2, \n3 on row 3, etc.  I use method 1, ``Using Fill Handle,\" from website trumpexcel.com/number-rows-in-excel.\nInsert link, if possible]  It's easy.\n\nColumn 2.  In column 2, please the names of the students in some particular (say, alphabetical) \norder.  This column will not go to Schedyool.  Alternatively, start with a sheet having the names of the \nstudents participating in blended learning in column 2, and add the line numbers in column 1.\n\nColumn 3:  Place in column 3 the grade level of the student whose name appears in column 2.  \nUse 0 for kindergarten.  These numbers must be between 0 and the maximum grade you entered above.\n  \nColumn 4.  In column 4, place M for a boy or F for a girl.  The genders are used only to approximately\nbalance the classrooms by gender.\n\nEach additional column, if any, corresponds to a special set.  So far, this file has four columns.\nIf there are no special sets, stop.  If there are special sets, add exactly one column per special set.\n\nFor each special set, in order, put a 1 if the student is in the special set and a 0 otherwise.\nFor example, if there are two special sets and the first student were not in the first one but were in the \nsecond, then in the first row, add a 0 in column 5 and a 1 in column 6.\n\nThe total number of columns should be 4 plus the number of special sets.\nSave the workbook as an Excel spreadsheet, perhaps calling it \"students_with_names\".\n\nNow, in Excel, copy all the columns EXCEPT FOR THE FIRST TWO to a new sheet.\nSave the workbook as type \"CSV (Comma Delimited)\".  You will get a warning saying \"The selected\nfile type does not support workbooks that contain multiple sheets.\"  That's exactly \nwhat you want.  Click \"OK\".  Then you will get a warning about losing features, and \"Do you want to \nkeep that format?\"  Click Yes.  Give the file a name like \"students_without_names\".  It will be \nstored with \".csv\" extension.  It is that file, students_without_names.csv, that you will\nupload to Schedyool.\n\nEXAMPLE.\n\nSuppose there are exactly 10 students participating in blended learning in your school \nand you have two special sets.  Your students_with_names file will have 6 columns and \nmay look like this:\n\n1   John Smith          4 M 0 1\n2   Mary Jones          5 F 0 0\n3   Letitia Williams    4 F 1 1\n4   Bill Friend         0 M 0 0\n5   Amir Aslam          2 M 0 0\n6   Kareem Smith        3 M 0 0\n7   Mohammad Talwar     1 M 1 0\n8   Cindy Halvah        1 F 1 0\n9   Carla Chan          2 F 0 0\n10  Sunil Chopra        5 M 0 1\n\nThe corresponding students_without_names.csv file will have 10 rows and look like this:\n\n4,M,0,1\n5,F,0,0\n4,F,1,1\n0,M,0,0\n2,M,0,0\n3,M,0,0\n1,M,1,0\n1,F,1,0\n2,F,0,0\n5,M,0,1 \n\nFrom this file, Schedyool knows that there are two special sets.  Assuming the first \nis ICT and the second is ENL, Schedyool knows that:\n\nThe first student is entering fourth grade, is a boy, is not in ICT but is in ENL.\nThe second is entering fifth grade and is a girl in neither ICT nor ENL\nThe third, entering fourth grade, is a girl who is in both ICT and ENL.\n\nBy the way, if you accidentally upload the file *with* names, don't panic.  The code\nwill fail (because it expects *numbers* in the first column, not names), \nreturn an error message, and delete the file.\n\nThe most difficult aspect of using Schedyool is the creation of the students file.\n            </Typography>\n\n            <Typography paragraph variant=\"h5\">\n            THE ROOM CAPACITY FILE\n            </Typography>\n            <Typography paragraph variant=\"body2\">\n            This file is much simpler.  Open a new sheet of the workbook.  In that sheet, use only the \nfirst three columns of each row.  Each row will correspond to a classroom available every\nday for blended learning.\n\nThe first column will contain the line numbers, as above.  \nIn the second column, place the name of the classroom, like \"Room 128\", and in the third, place\nits \"socially-distanced\" student capacity, like 10.  (Remember to deduct for \nteachers.)  There must be exactly one row for each \nclassroom and no header row.  Call that sheet \"room_capacities_with_names\".\n\nThen copy only the *third* column of that sheet to a new sheet.\nThen save the last sheet alone as a CSV file, as you did above, ignoring the \nwarnings from Excel.  Call that CSV file something like \"room_capacities_without_names\", to which \na \".csv\" extension will be added.  This is the room capacity file you will upload to Schedyool.\n\nEXAMPLE.\n\nHere is a sample 7-line room_capacities_without_names.csv file, for a school with 7 classrooms.\n\n10\n8\n12\n12\n11\n7\n9\n\nThere are two more files to upload.  They are not difficult.\n            </Typography>\n\n            <Typography paragraph variant=\"h5\">\n            THE SAME-DAY SETS FILE\n            </Typography>\n\n            <Typography paragraph variant=\"body2\">\n                \nYou likely have some sets of students who want to be scheduled on the same day.  Perhaps\nsome of your sets are sets of siblings and some are \"learning pods.\"  You will now create a file \ncontaining one line for each such set.  In this file, we represent a student\nby the number of the row in which the student appears in the students_with_names file.\nFor example, look at the sample students_with_names.csv file above.  \nSuppose that John Smith and Kareem Smith are siblings who should be scheduled\non the same day.  Then add to the same-day sets file the row \n\n<code>1  6</code>\n\nwith the 1 in the first column, the 6, in the second,\nbecause John Smith is student 1 and Kareem Smith is student 6.\nIf Letitia Williams, Mohammad Talwar, and Carla Chan are in a learning pod together and \ndesire to be scheduled together, add row\n\n<code>3  7  9</code>\n\nwith the 9 in the third column.\n(The numbers in a row actually do not have to be in sorted order.)  As you can see,\ndifferent rows in this file can have different numbers of entries.\nShould Sunil Chopra and Bill Friend be friends who want to be scheduled on the same row, add row\n\n<code>10  4</code>\n\nNow save this spreadsheet as CSV (not as Excel) into something like \"same_day_sets.csv\".\nIn CSV format, the file will have three lines and will look like this:\n\n<code>1,6</code>\n<code>3,7,9</code>\n<code>10,4</code>\n\nThis is the same-day-sets file you will upload to Schedyool.\n\n            </Typography>\n\n\n            <Typography paragraph variant=\"h5\">\n            THE DIFFERENT DAY PAIRS FILE  \n            </Typography>\n\n            <Typography paragraph variant=\"body2\">\n            Last, you must upload a different-day-pairs file, for pairs of students who want to be\nscheduled on different days.  This file looks a lot like the same-day-sets file, except that\nit has exactly two numbers per row.  You simply place on each row the row numbers of a pair\nof students who want to be scheduled on different days.  For example, if Cindy Halvah and \nMohammad Talwar are such a pair, add row\n\n<code>8 7 </code>\n\nIf John Smith and Sunil Chopra are another another such pair, add row\n\n<code>1 10</code>\n\nSave as CSV into something like \"different_day_pairs.csv\".  In this example, the 2-line file to be\nuploaded would be \n\n<code>8,7</code>\n<code>1,10</code>\n\n            </Typography>\n\n            <Typography paragraph variant=\"h5\">\n                SUBMITTING YOUR DATA\n            </Typography>\n\n            <Typography paragraph variant=\"body2\">\n                After reviewing your data on the Review page, click Submit.  The code will need up to 15 minutes.\n                At completion, it will send you an e-mail.  The e-mail will contain the schedule,\n                presuming (as is usually the case) it found\n                one.  If it failed to find one, there was probably a mistake in your data, either in the\n                quantities you entered by hand or in the files you uploaded.  In most but not all cases,\n                Schedyool will describe the error, but in some cases you will have to examine the data you entered\n                and find the error yourself.  In rare cases, Schedyool might even fail to find a schedule, if, for\n                example, your scheduling problem is too difficult, even when there is no error in the data.\n            </Typography>\n\n            <Typography paragraph variant=\"h5\">\n                HOW TO INTERPRET THE E-MAIL\n            </Typography>\n\n            <Typography paragraph variant=\"body2\">\n                If Schedyool found a schedule, it will appear as the CSV attachment \"schedule.csv\" to the e-mail.\n                This attachment corresponds to the textual output which appears in the body of the e-mail.  File\n                schedule.csv will have four columns.  The first is the student number, from students_with_names.csv;\n                the second is that student's grade level;  the third is the day on which the student will attend\n                school (more about this in a moment); and the last is the classroom number.\n            </Typography>\n            <Typography paragraph variant=\"body2\">\n                The \"day\" is really the \"schedule.\"  For example, for Monday-Tuesday and alternate Wednesdays\n                vs Thursday-Friday and alternate Wednesdays, \"day 1\" means the former and \"day 2\" means the latter.\n            </Typography>\n            <Link href=\"/scheduler\">\n                <Controls.Button text=\"Schedyool!\" />\n            </Link>\n            <Link href=\"/\">\n                <Controls.Button text=\"Home\" color=\"default\" />\n            </Link>\n        </Page>\n    );\n};\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}